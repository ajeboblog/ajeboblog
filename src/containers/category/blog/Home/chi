import React from 'react';
import { connect } from 'react-redux';
//import dynamic from 'next/dynamic'
import PropTypes from 'prop-types';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import {
  makeSelectRecentBlogsIsLoading,
  makeSelectRecentBlogs,
} from '../../utils/selectors';
import injectSaga from '../../../../utils/injectSaga';
import injectReducer from '../../../../utils/injectReducer';
import reducer from '../../utils/reducer';
import saga from '../../utils/saga';
import * as mapDispatchToProps from '../../utils/actions';
import moment from "moment";
import dynamic from 'next/dynamic';
//const RecentBlog = dynamic(() => import('../../component/recent2'));
//const Popular  = dynamic(()=> import('../../component/popularpost'));
import Header from '../../../../assets/Header'
//import Footer from '../../../../assets/Footer'
import Loading from '../../../../assets/Loader'
import Head from 'next/head'

export class Home extends React.Component {
  static propTypes = {
    loading: PropTypes.bool.isRequired,
    loadRecentBlogsRequest: PropTypes.func.isRequired,
    blogs: PropTypes.array.isRequired,
  };

  componentDidMount() {
    this.props.clearOne();
    this.props.loadRecentBlogsRequest();
    this.props.loadPopularPostRequest();
  }

  render() {
   
    return this.props.loading == true ? (
      <>
   
    <Loading/>
   
      </>
      ) : (
     
      <>


<Head>
      <title> Ajeboblog | Home</title>
      <meta
      key="description"
      name="description"
      content="This is the Home of Home News"
      />


     <meta
      key="og:site_name"
      property="og:site_name"
      content="Ajeboblog"
      />

<meta
      key="og:type"
      property="og:type"
      content="website"
      />

<meta
      key="og:title"
      name="og:title"
      property="og:title"
      content="Ajeboblog | Home"
      />



    </Head>

    <div>

       <Header/>

      
                
       

      </div>

   </>
      );
    }
  }
  const mapStateToProps = createStructuredSelector({
    loading: makeSelectRecentBlogsIsLoading(),
    blogs: makeSelectRecentBlogs(),
  });
  
  
  const withConnect = connect(
    mapStateToProps,
    mapDispatchToProps,
  );  

  
const withReducer = injectReducer({ key: 'blogPage', reducer });
const withSaga = injectSaga({ key: 'blogPage', saga });


  export default compose(
    withSaga,
    withReducer,
    withConnect)(Home);
